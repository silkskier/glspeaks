
// Copyright (c) 2010-2023 niXman (github dot nixman at pm dot me). All
// rights reserved.
//
// This file is part of YAS(https://github.com/niXman/yas) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef __yas__get_archive_hpp
#define __yas__get_archive_hpp

#include <yas/yas_fwd.hpp>

#include <yas/binary_oarchive.hpp>
#include <yas/binary_iarchive.hpp>
#include <yas/text_oarchive.hpp>
#include <yas/text_iarchive.hpp>
#include <yas/json_oarchive.hpp>
#include <yas/json_iarchive.hpp>
#include <yas/mem_streams.hpp>
#include <yas/file_streams.hpp>
#include <yas/std_streams.hpp>
#include <yas/count_streams.hpp>

namespace yas {

/***************************************************************************/

template<std::size_t F, std::size_t WI = (F & (~((F & yas::mem) ? yas::mem : yas::file)))>
struct get_output_archive {
    static_assert((F & yas::mem) || (F & yas::file), "");
    using stream_type = typename std::conditional<
        ((F & yas::mem) > 0)
        ,yas::mem_ostream
        ,yas::file_ostream
    >::type;

    static_assert((F & yas::binary) || (F & yas::text) || (F & yas::json), "");
    using archive_type = typename std::conditional<
        ((F & yas::binary) > 0)
        ,yas::binary_oarchive<stream_type, WI>
        ,typename std::conditional<
            ((F & yas::text) > 0)
            ,yas::text_oarchive<stream_type, WI, default_traits>
            ,yas::json_oarchive<stream_type, WI, default_traits>
        >::type
    >::type;
};

template<std::size_t F, std::size_t WI = (F & (~((F & yas::mem) ? yas::mem : yas::file)))>
struct get_input_archive {
    static_assert((F & yas::mem) || (F & yas::file), "");
    using stream_type = typename std::conditional<
        ((F & yas::mem) > 0)
        ,yas::mem_istream
        ,yas::file_istream
    >::type;

    static_assert((F & yas::binary) || (F & yas::text) || (F & yas::json), "");
    using archive_type = typename std::conditional<
        ((F & yas::binary) > 0)
        ,yas::binary_iarchive<stream_type, WI>
        ,typename std::conditional<
            ((F & yas::text) > 0)
            ,yas::text_iarchive<stream_type, WI, default_traits>
            ,yas::json_iarchive<stream_type, WI, default_traits>
        >::type
    >::type;
};

/***************************************************************************/

} // namespace yas

#endif // __yas__get_archive_hpp
