
// Copyright (c) 2010-2023 niXman (github dot nixman at pm dot me). All
// rights reserved.
//
// This file is part of YAS(https://github.com/niXman/yas) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef __yas__tools__array_hpp
#define __yas__tools__array_hpp

#include <yas/detail/type_traits/type_traits.hpp>

#include <cstdlib>

namespace yas {

/***************************************************************************/

template<typename T>
struct save_array_wrapper {
    const T *ptr;
    const std::size_t size;
};

template<typename T>
save_array_wrapper<T> array(const T *ptr, std::size_t size) {
    return {ptr, size};
}

template<typename T>
save_array_wrapper<T> array(const T *beg, const T *end) {
    return {beg, __YAS_SCAST(std::size_t, end - beg)};
}

/***************************************************************************/

template<typename T>
struct load_array_wrapper {
    load_array_wrapper(const load_array_wrapper &) = delete;
    load_array_wrapper& operator=(const load_array_wrapper &) = delete;
    load_array_wrapper(load_array_wrapper &&) = default;
    load_array_wrapper& operator=(load_array_wrapper &&) = default;

    static T* alloc(std::size_t num) { return new T[num]; }
    static void free(T *ptr) { delete[] ptr; }

    T **ptr;
    std::size_t *size;
    T*(*alloc_fnptr)(std::size_t);
};

template<typename T>
load_array_wrapper<T> array(
     T **ptr
    ,std::size_t *size
    ,T*(*allocfn)(std::size_t) = load_array_wrapper<T>::alloc)
{
    return {ptr, size, allocfn};
}

/***************************************************************************/

} // namespace yas

#endif // __yas__tools__array_hpp
