
// Copyright (c) 2010-2023 niXman (github dot nixman at pm dot me). All
// rights reserved.
//
// This file is part of YAS(https://github.com/niXman/yas) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef __yas__types__qt__qmap_serializers_hpp
#define __yas__types__qt__qmap_serializers_hpp

#include <yas/detail/type_traits/type_traits.hpp>
#include <yas/detail/type_traits/serializer.hpp>
#include <yas/types/concepts/keyval.hpp>

#include <QtCore/QMap>

namespace yas {
namespace detail {

/***************************************************************************/

template<
     std::size_t F
    ,typename K
    ,typename V
>
struct serializer<
    type_prop::not_a_fundamental,
    ser_case::use_internal_serializer,
    F,
    QMap<K, V>
> {
    template<typename Archive>
    static Archive& save(Archive& ar, const QMap<K, V>& map) {
        __YAS_CONSTEXPR_IF ( F & yas::json ) {
            if ( map.isEmpty() ) {
                ar.write("[]", 2);

                return ar;
            }

            ar.write("[", 1);
            auto it = map.begin();
            ar & YAS_OBJECT_NVP(
                nullptr
                ,("k", it.key())
                ,("v", it.value())
            );
            for ( ++it; it != map.end(); ++it ) {
                ar.write(",", 1);
                ar & YAS_OBJECT_NVP(
                    nullptr
                    ,("k", it.key())
                    ,("v", it.value())
                );
            }
            ar.write("]", 1);
        } else {
            ar.write_seq_size(map.size());
            for ( auto it = map.begin(); it != map.end(); ++it ) {
                ar  & it.key()
                    & it.value()
                ;
            }
        }

        return ar;
    }

    template<typename Archive>
    static Archive& load(Archive& ar, QMap<K, V> &map) {
        __YAS_CONSTEXPR_IF ( F & yas::json ) {
            __YAS_CONSTEXPR_IF ( !(F & yas::compacted) ) {
                json_skipws(ar);
            }

            __YAS_THROW_IF_WRONG_JSON_CHARS(ar, "[");

            __YAS_CONSTEXPR_IF ( !(F & yas::compacted) ) {
                json_skipws(ar);
            }

            // case for empty object
            const char ch = ar.peekch();
            if ( ch == ']' ) {
                ar.getch();

                return ar;
            }

            __YAS_CONSTEXPR_IF ( !(F & yas::compacted) ) {
                json_skipws(ar);
            }

            while ( true ) {
                typename QMap<K, V>::key_type k = typename QMap<K, V>::key_type();
                typename QMap<K, V>::mapped_type v = typename QMap<K, V>::mapped_type();
                ar & YAS_OBJECT_NVP(
                    nullptr
                    ,("k", k)
                    ,("v", v)
                );
                map.insert(k, v);

                __YAS_CONSTEXPR_IF ( !(F & yas::compacted) ) {
                    json_skipws(ar);
                }

                const char ch2 = ar.peekch();
                if ( ch2 == ']' ) {
                    break;
                } else {
                    ar.getch();
                }

                __YAS_CONSTEXPR_IF ( !(F & yas::compacted) ) {
                    json_skipws(ar);
                }
            }

            __YAS_THROW_IF_WRONG_JSON_CHARS(ar, "]");
        } else {
            auto size = ar.read_seq_size();
            for ( ; size; --size ) {
                typename QMap<K, V>::key_type k = typename QMap<K, V>::key_type();
                typename QMap<K, V>::mapped_type v = typename QMap<K, V>::mapped_type();
                ar  & k
                    & v
                ;
                map.insert(k, v);
            }
        }

        return ar;
    }
};

/***************************************************************************/

} // namespace detail
} // namespace yas

#endif // __yas__types__qt__qmap_serializers_hpp
