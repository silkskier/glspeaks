
// Copyright (c) 2010-2023 niXman (github dot nixman at pm dot me). All
// rights reserved.
//
// This file is part of YAS(https://github.com/niXman/yas) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef __yas__types__utility__array_hpp
#define __yas__types__utility__array_hpp

#include <yas/detail/type_traits/type_traits.hpp>
#include <yas/detail/type_traits/serializer.hpp>
#include <yas/detail/io/serialization_exceptions.hpp>

#include <yas/tools/array.hpp>

namespace yas {
namespace detail {

/***************************************************************************/

template<std::size_t F, typename T>
struct serializer<
    type_prop::not_a_fundamental,
    ser_case::use_internal_serializer,
    F,
    save_array_wrapper<T>
> {
    template<typename Archive>
    static Archive& save(Archive &ar, const save_array_wrapper<T> &arr) {
        auto beg = arr.ptr;
        const auto end = beg + arr.size;
        __YAS_CONSTEXPR_IF( F & yas::json ) {
            if ( arr.size ) {
                static const char size_[] = "{\"size\":";
                ar.write(size_, sizeof(size_)-1);
                ar.write(arr.size);
                static const char mid_[] = ",\"data\":[";
                ar.write(mid_, sizeof(mid_)-1);
                ar & (*beg);
                for ( ++beg; beg != end; ++beg ) {
                    ar.write(",", 1);
                    ar & (*beg);
                }
                static const char end_[] = "]}";
                ar.write(end_, sizeof(end_)-1);
            } else {
                static const char _empty[] = "{\"size\":0,\"data\":[]}";
                ar.write(_empty, sizeof(_empty)-1);
            }
        } else {
            ar.write_seq_size(arr.size);
            __YAS_CONSTEXPR_IF ( can_be_processed_as_byte_array<F, T>::value ) {
                ar.write(beg, sizeof(T) * arr.size);
            } else {
                for ( ; beg != end; ++beg ) {
                    ar & (*beg);
                }
            }
        }

        return ar;
    }

    template<typename Archive>
    static Archive& load(Archive &ar, save_array_wrapper<T> &/*arr*/) {
        return ar;
    }
};

/***************************************************************************/

template<std::size_t F, typename T>
struct serializer<
    type_prop::not_a_fundamental,
    ser_case::use_internal_serializer,
    F,
    load_array_wrapper<T>
> {
    template<typename Archive>
    static Archive& save(Archive &ar, const load_array_wrapper<T> &/*arr*/) {
        return ar;
    }

    template<typename Archive>
    static Archive& load(Archive &ar, load_array_wrapper<T> &arr) {
        __YAS_CONSTEXPR_IF ( F & yas::json ) {
            __YAS_CONSTEXPR_IF ( !(F & yas::compacted) ) {
                json_skipws(ar);
            }
            __YAS_THROW_IF_WRONG_JSON_CHARS(ar, "{\"size\":");

            __YAS_CONSTEXPR_IF ( !(F & yas::compacted) ) {
                json_skipws(ar);
            }

            std::size_t size{};
            ar.read(size);

            __YAS_CONSTEXPR_IF ( !(F & yas::compacted) ) {
                json_skipws(ar);
            }

            __YAS_THROW_IF_WRONG_JSON_CHARS(ar, ",");

            __YAS_CONSTEXPR_IF ( !(F & yas::compacted) ) {
                json_skipws(ar);
            }

            if ( size ) {
                (*arr.ptr) = (arr.alloc_fnptr)(size);
                __YAS_THROW_CANT_ALLOCATE_MEMORY(*arr.ptr);
                (*arr.size) = size;

                __YAS_THROW_IF_WRONG_JSON_CHARS(ar, "\"data\":");

                __YAS_CONSTEXPR_IF ( !(F & yas::compacted) ) {
                    json_skipws(ar);
                }

                __YAS_THROW_IF_WRONG_JSON_CHARS(ar, "[");

                auto *beg = (*arr.ptr);
                auto *end = beg + (*arr.size);
                for ( ; beg != end; ++beg ) {
                    ar & (*beg);
                    __YAS_CONSTEXPR_IF ( !(F & yas::compacted) ) {
                        json_skipws(ar);
                    }

                    const char ch2 = ar.peekch();
                    if ( ch2 == ']' ) {
                        break;
                    } else {
                        __YAS_THROW_IF_WRONG_JSON_CHARS(ar, ",");
                    }

                    __YAS_CONSTEXPR_IF ( !(F & yas::compacted) ) {
                        json_skipws(ar);
                    }
                }

                __YAS_CONSTEXPR_IF ( !(F & yas::compacted) ) {
                    json_skipws(ar);
                }

                __YAS_THROW_IF_WRONG_JSON_CHARS(ar, "]");
            } else {
                (*arr.size) = 0u;

                __YAS_THROW_IF_WRONG_JSON_CHARS(ar, "\"data\":");

                __YAS_CONSTEXPR_IF ( !(F & yas::compacted) ) {
                    json_skipws(ar);
                }

                __YAS_THROW_IF_WRONG_JSON_CHARS(ar, "[");

                __YAS_CONSTEXPR_IF ( !(F & yas::compacted) ) {
                    json_skipws(ar);
                }

                __YAS_THROW_IF_WRONG_JSON_CHARS(ar, "]");
            }

            __YAS_CONSTEXPR_IF ( !(F & yas::compacted) ) {
                json_skipws(ar);
            }

            __YAS_THROW_IF_WRONG_JSON_CHARS(ar, "}");
        } else {
            const std::size_t size = ar.read_seq_size();
            (*arr.ptr) = (arr.alloc_fnptr)(size);
            __YAS_THROW_CANT_ALLOCATE_MEMORY(*arr.ptr);
            (*arr.size) = size;

            auto *beg = (*arr.ptr);
            auto *end = beg + (*arr.size);
            __YAS_CONSTEXPR_IF ( can_be_processed_as_byte_array<F, T>::value ) {
                ar.read(beg, sizeof(T) * (*arr.size));
            } else {
                for ( ; beg != end; ++beg ) {
                    ar & (*beg);
                }
            }
        }

        return ar;
    }
};

/***************************************************************************/

} // ns detail
} // ns yas

#endif // __yas__types__utility__array_hpp
