
// Copyright (c) 2010-2023 niXman (github dot nixman at pm dot me). All
// rights reserved.
//
// This file is part of YAS(https://github.com/niXman/yas) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef __yas__yas_fwd_hpp
#define __yas__yas_fwd_hpp

#include <yas/detail/type_traits/flags.hpp>
#include <yas/detail/type_traits/serializer.hpp>

namespace yas {

/***************************************************************************/

struct shared_buffer;
struct intrusive_buffer;

struct mem_ostream;
struct mem_istream;

struct file_ostream;
struct file_istream;

template<typename IS, std::size_t F>
struct binary_iarchive;
template<typename OS, std::size_t F>
struct binary_oarchive;

struct default_traits;
struct std_traits;

template<typename IS, std::size_t F, typename Traits>
struct text_iarchive;
template<typename OS ,std::size_t F, typename Traits>
struct text_oarchive;

template<typename IS, std::size_t F, typename Traits>
struct json_iarchive;
template<typename OS, std::size_t F, typename Traits>
struct json_oarchive;

/***************************************************************************/

} // ns yas

#endif // __yas__yas_fwd_hpp